type User {
  email: String! @unique
  role: UserRole!
  name: String
  salesNumber: String
  salesRef: Salesmen
}

enum UserRole {
  MANAGER
  EMPLOYEE
  ADMIN
  INSIDESALES
  OUTSIDESALES
}

type Salesmen {
  number: String
  name: String
  type: String
  store: String
}

type Projects {
  requestId: Long!
  title: String! @unique
  createdBy: User!
  active: Boolean!
  description: String!
  status: String!
  dateEntered: String!
  dateDue: String!
  amount: Long!
  salesman: String!
  salesRef: Salesmen!
  size: String!
  customerList: [CustomerProjectState] @relation
  comments: [Comments]! @relation
}

type Comments {
  project: Projects!
  dateCreated: String!
  message: String!
  user: User!
  edited: Boolean!
}


type CustomerProjectState {
  projectRef: Projects!
  customerRef: Customers!
  status: String!
  amount: Long
  dateDue: String
}

type Customers {
  account: String
  storeNumber: String
  accountId: String
  customerType: String
  accountType: String
  salesmanNumber: String
  salesmanNumber2: String
  salesmanNumber3: String
  salesmanNumber4: String
  alphaKey: String
  keyAccountId: String
  name: String
}

input CreateProjectInput {
  title: String!
  description: String
  status: String!
  dateEntered: String!
  dateDue: String!
  amount: Long!
  size: String!
  salesman: String!
  customerList: [CustomerProjectStateInput]!
}

input CustomerProjectStateInput {
  account: String!
  name: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: UserRole!
  name: String
  salesNumber: String
}

input LoginUserInput {
  email: String!
  password: String!
}

type Query {
  getUser: User
  currentUser: Boolean @resolver(name: "current_user")
  getAllSalesmen: [Salesmen!]!
  getAllCustomers: [Customers!]!
  getAllProjects: [Projects!]!
  getActiveProjects(active: Boolean! = true): [Projects!]!
  getSalesmenByType(type: String!): [Salesmen!]!
}

type Mutation {
  createUser(input: CreateUserInput): User! @resolver(name: "create_user")
  loginUser(input: LoginUserInput): String! @resolver(name: "login_user")
  createProject(input: CreateProjectInput): Projects @resolver(name: "create_project")
}