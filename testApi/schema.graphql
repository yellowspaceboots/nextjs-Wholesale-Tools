type User {
  email: String! @unique
  role: UserRole!
  name: String
  salesNumber: String
  salesRef: Salesmen
}

enum UserRole {
  MANAGER
  EMPLOYEE
  ADMIN
  INSIDESALES
  OUTSIDESALES
}

type Salesmen {
  number: String
  name: String
  type: String
  store: String
}

type Projects {
  requestId: Long!
  title: String! @unique
  createdBy: User!
  editedBy: User!
  active: Boolean!
  description: String!
  status: String!
  dateEntered: String!
  dateEdited: String!
  dateDue: String!
  amount: Long!
  salesman: String!
  salesRef: Salesmen!
  size: String!
  customerList: [CustomerProjectState] @relation
  comments: [Comments]! @relation
}

type Comments {
  project: Projects
  dateCreated: String
  message: String
  user: User
  edited: Boolean
  replyTo: String
}


type CustomerProjectState {
  projectRef: Projects!
  customerRef: Customers!
  status: String!
  active: Boolean
  amount: Long
  dateDue: String
}

type Customers {
  account: String
  storeNumber: String
  accountId: String
  customerType: String
  accountType: String
  salesmanNumber: String
  salesmanNumber2: String
  salesmanNumber3: String
  salesmanNumber4: String
  alphaKey: String
  keyAccountId: String
  name: String
  salesRef: Salesmen
}

type LoginResult @embedded {
  token: String!
  user: User
}

input CreateProjectInput {
  title: String!
  description: String
  status: String!
  dateEntered: String!
  dateDue: String!
  amount: Long!
  size: String!
  salesman: String!
  customerList: [CustomerProjectStateInput]!
}

input UpdateProjectInput @embedded {
  projectId: String!
  title: String!
  description: String
  status: String!
  dateDue: String!
  dateEdited: String!
  amount: Long!
  size: String!
  salesman: String!
}

input AddCustomerToProjectInput @embedded {
  projectId: String!
  customerList: [CustomerProjectStateInput]!
}

input CustomerProjectStateInput {
  account: String
  name: String
  status: String
  amount: Long
}

input CreateUserInput {
  email: String!
  password: String!
  role: UserRole!
  name: String
  salesNumber: String
}

input LoginUserInput {
  email: String!
  password: String!
}

type Query {
  currentUser: Boolean! @resolver(name: "current_user")
  getUser: User
  getMe: User @resolver(name: "get_me")
  getAllSalesmen: [Salesmen!]!
  getAllCustomers: [Customers!]!
  getAllProjects: [Projects!]!
  activeCustomerState(active: Boolean! = true): [CustomerProjectState!]!
  getActiveProjectsBySalesNumber(active: Boolean! = true, salesman: String!): [Projects!]!
  getActiveProjectsByOutsideSalesman(salesman: String!): [Projects!]! @resolver(name: "get_outside_salesman_projects", paginated: true)
  getCustomerProjectStateByActiveProjects: [CustomerProjectState!]! @resolver(name: "get_cps_by_active_projects", paginated: true)
  getActiveProjects(active: Boolean! = true): [Projects!]!
  getSalesmenByType(type: String!): [Salesmen!]!
  getAllOpenProjects: [Projects!]! @resolver(name: "get_all_open_jobs", paginated: true)
  getAllPendingProjects: [Projects!]! @resolver(name: "get_all_pending_jobs", paginated: true)
  getAllClosedProjects: [Projects!]! @resolver(name: "get_all_closed_jobs", paginated: true)
}

type Mutation {
  createUser(input: CreateUserInput): User! @resolver(name: "create_user")
  loginUser(input: LoginUserInput): LoginResult! @resolver(name: "login_user")
  createProject(input: CreateProjectInput): Projects @resolver(name: "create_project")
  updateProject(input: UpdateProjectInput!): Projects @resolver(name: "update_project")
  addCustomersToProject(input: AddCustomerToProjectInput!): Projects! @resolver(name: "add_customers_to_project")
}